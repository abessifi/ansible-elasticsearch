---
# Elasticsearch Ansible Tasks

# Configure timezone
- name: Configuring timezone
  shell: "echo {{ elasticsearch_timezone }} > /etc/timezone; dpkg-reconfigure --frontend noninteractive tzdata"
  when: elasticsearch_timezone is defined

# Install dependencies
- name: Install dependencies
  apt: pkg={{ item }} state=present
  with_items: elasticsearch_apt_dependencies

# Configure user and group
- name: Configuring user and group
  group: name={{ elasticsearch_group }}
- user: name={{ elasticsearch_user }} group={{ elasticsearch_group }} createhome=no

# Check whether we have aleady installed the same version
- stat: path="{{ elasticsearch_home_dir }}/lib/elasticsearch-{{ elasticsearch_version }}.jar"
  register: es_archive

# Download deb if needed
- name: Download Elasticsearch deb
  get_url: url={{ elasticsearch_download_url }}/elasticsearch-{{ elasticsearch_version }}.deb dest=/tmp/elasticsearch-{{ elasticsearch_version }}.deb mode=0440
  when: es_archive.stat.exists == false

# Uninstall previous version if applicable
- name: Uninstalling previous version if applicable
  shell: dpkg --remove elasticsearch
  when: es_archive.stat.exists == false
- file: path={{ elasticsearch_home_dir }} state=absent
  when: es_archive.stat.exists == false

# Install the deb
- name: Install Elasticsearch deb
  shell: dpkg -i -E --force-confnew /tmp/elasticsearch-{{ elasticsearch_version }}.deb
  when: es_archive.stat.exists == false
- file: path={{ elasticsearch_home_dir }} state=directory owner={{ elasticsearch_user }} group={{ elasticsearch_group }} recurse=yes

# Configure directories
- name: Configuring directories
  file: path={{ item }} state=directory owner={{ elasticsearch_user }} group={{ elasticsearch_group }} recurse=yes
  with_items:
    - "{{ elasticsearch_log_dir }}"
    - "{{ elasticsearch_data_dir }}"
    - "{{ elasticsearch_work_dir }}"
    - "{{ elasticsearch_conf_dir }}"
    - "{{ elasticsearch_plugin_dir }}"

# Configure open file limits
- name: Configuring open file limits
  lineinfile: dest="{{ item.dest }}"
              regexp="{{ item.regexp }}"
              insertafter="{{ item.insertafter }}"
              line="{{ item.line }}"
  notify: Restart Elasticsearch
  with_items:
    - { dest: '/etc/security/limits.conf', regexp: '^{{ elasticsearch_user }}     -    nofile    {{ elasticsearch_max_open_files }}', insertafter: 'EOF', line: '{{ elasticsearch_user }}     -    nofile    {{ elasticsearch_max_open_files }}'}
    - { dest: '/etc/security/limits.conf', regexp: '^{{ elasticsearch_user }}     -    memlock   {{ elasticsearch_max_locked_memory }}', insertafter: 'EOF', line: '{{ elasticsearch_user }}     -    memlock   {{ elasticsearch_max_locked_memory }}' }
    - { dest: '/etc/pam.d/su', regexp: '^session    required   pam_limits.so', insertafter: 'EOF', line: 'session    required   pam_limits.so' }
    - { dest: '/etc/pam.d/common-session', regexp: '^session    required   pam_limits.so', insertafter: 'EOF', line: 'session    required   pam_limits.so' }
    - { dest: '/etc/pam.d/common-session-noninteractive', regexp: '^session    required   pam_limits.so', insertafter: 'EOF', line: 'session    required   pam_limits.so' }
    - { dest: '/etc/pam.d/sudo', regexp: '^session    required   pam_limits.so', insertafter: 'EOF', line: 'session    required   pam_limits.so' }

- name: Update max-open-files in initscript
  lineinfile: dest=/etc/init.d/elasticsearch regexp='^(DAEMON_OPTS=".*-Des.max-open-files=true")$' insertafter='^(DAEMON_OPTS=".*CONF_DIR")$' line='DAEMON_OPTS="$DAEMON_OPTS -Des.max-open-files=true"'
  notify: Restart Elasticsearch

# Install Other Generic Plugins
- include: plugins.yml
  when: (elasticsearch_plugins is defined)

# Install custom JARs
- include: custom-jars.yml
  when: (elasticsearch_custom_jars is defined)

# Install Marvel Plugin (for Elasticsearch monitoring)
- include: marvel.yml
  when: (elasticsearch_plugin_marvel_version is defined)

# Configure Elasticsearch Node
- name: Configuring Elasticsearch Node
  template: src=elasticsearch.yml.j2 dest={{ elasticsearch_conf_dir }}/elasticsearch.yml owner={{ elasticsearch_user }} group={{ elasticsearch_group }} mode=0644
  when: elasticsearch_conf_dir is defined
  notify: Restart Elasticsearch

- template: src=elasticsearch.default.j2 dest=/etc/default/elasticsearch owner={{ elasticsearch_user }} group={{ elasticsearch_group }} mode=0644
  notify: Restart Elasticsearch

# Register Elasticsearch service to start on boot
- name: Ensure Elasticsearch is started on boot
  service: name=elasticsearch enabled={{ elasticsearch_service_startonboot }} state={{ elasticsearch_service_state }}
